pipeline {
    agent any

    parameters {
        string(name: 'GITHUB_REPO', defaultValue: 'SIDHARTH27163/ERP_SPRINGBOOT_APIs', description: 'GitHub Repository Name')
        choice(name: 'BRANCH', choices: ['main', 'dev', 'feature'], description: 'Select the branch to checkout')  
    }

    environment {
        IMAGE_NAME = "springboot-container"
        VERSION = "1.0.${BUILD_NUMBER}"                      // Version based on Jenkins Build Number
        BACKUP_VERSION = "backup-${BUILD_NUMBER - 1}"        // Backup version tag
    }

    stages {

        stage('Clean Workspace') {
            steps {
                echo " Cleaning Workspace..."
                cleanWs()
            }
        }

        stage('Clone Repo') {
            steps {
                echo "Cloning repository from GitHub: ${GITHUB_REPO} - Branch: ${BRANCH}"
                script {
                    // Clone the selected branch from GitHub
                    sh "git clone -b ${BRANCH} https://github.com/${GITHUB_REPO}.git source"
                }
            }
        }

        stage('Build with Maven') {    
            steps {
                script {
                    echo " Running Maven clean install..."
                    sh """
                    cd source
                    mvn clean install -DskipTests
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo " Building Docker Image: ${IMAGE_NAME}:${VERSION}"

                    sh """
                    cd source
                    # Create a backup of the current running container
                    docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:${BACKUP_VERSION} || echo "No backup available"

                    # Build the new image
                    docker build -t ${IMAGE_NAME}:${VERSION} .
                    """
                }
            }
        }

        stage('Deploy New Image') {
            steps {
                script {
                    echo " Deploying new Docker image..."

                    sh """
                    cd source

                    # Stop the backend service (without affecting MySQL)
                    docker-compose stop backend || echo "No old container found"

                    # Update the backend image version
                    sed -i 's|image:.*|image: ${IMAGE_NAME}:${VERSION}|' docker-compose.yml

                    # Start the backend service with the new image (without MySQL)
                    docker-compose up -d --no-deps backend

                    # Verify the deployment
                    timeout 10 docker ps | grep "${IMAGE_NAME}:${VERSION}" || exit 1
                    """
                }
            }
        }

        stage('Rollback on Failure') {
            steps {
                script {
                    echo " Checking for Rollback..."

                    sh """
                    # Rollback if deployment fails
                    if [ $? -ne 0 ]; then
                        echo " Deployment failed, rolling back..."
                        docker-compose stop backend
                        docker tag ${IMAGE_NAME}:${BACKUP_VERSION} ${IMAGE_NAME}:latest
                        docker-compose up -d --no-deps backend
                    fi
                    """
                }
            }
        }

        stage('Post-Deployment Cleanup') {
            steps {
                script {
                    echo " Cleaning up old Docker images..."
                    sh """
                    docker image prune -f
                    docker rmi -f ${IMAGE_NAME}:${BACKUP_VERSION} || echo "No old image to remove"
                    """
                }
            }
        }
    }

    post {
        success {
            echo " Deployment completed successfully!"
        }
        failure {
            echo " Deployment failed. Rolling back..."
        }
    }
}
