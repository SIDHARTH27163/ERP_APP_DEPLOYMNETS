pipeline {
    agent any

    parameters {
        string(name: 'GITHUB_REPO', defaultValue: 'SIDHARTH27163/ERP_SPRINGBOOT_APIs', description: 'GitHub Repository')
        choice(name: 'BRANCH', choices: ['main', 'dev', 'feature'], description: 'Branch to build')
    }

    environment {
        IMAGE_NAME = "springboot-container"
        DOCKER_REGISTRY = "localhost:5000"
        DEPLOYMENT_NAME = "springboot-app"
        K8S_DIR = "k8s"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                echo "Cleaning workspace..."
                cleanWs()
            }
        }

        stage('Clone Repository') {
            steps {
                bat """
                git clone -b ${params.BRANCH} https://github.com/${params.GITHUB_REPO}.git app
                """
            }
        }

        stage('Build Spring Boot App') {
            steps {
                bat """
                cd app/EntryApp
                mvn clean package -DskipTests
                """
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    env.VERSION = "1.0.${env.BUILD_NUMBER}"
                    env.BACKUP_VERSION = "1.0.${env.BUILD_NUMBER.toInteger() - 1}"
                }

                bat """
                cd app
                docker build -t ${IMAGE_NAME}:${VERSION} .
                docker tag ${IMAGE_NAME}:${VERSION} ${DOCKER_REGISTRY}/${IMAGE_NAME}:${VERSION}
                """
            }
        }

        stage('Push Docker Image (optional)') {
            steps {
                bat "docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${VERSION}"
            }
        }

        stage('K8s Deploy MySQL & App') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-dev', variable: 'KUBECONFIG')]) {
                    powershell """
                    \$env:VERSION = '${VERSION}'

                    cd app

                    # Replace version in deployment YAML
                    (Get-Content springboot-deployment.yaml) -replace '__VERSION__', \$env:VERSION | Set-Content k8s-springboot.yaml

                    kubectl apply -f mysql-deployment.yaml
                    kubectl apply -f mysql-service.yaml

                    kubectl apply -f k8s-springboot.yaml
                    kubectl apply -f springboot-service.yaml
                    """
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    def result = bat(script: "kubectl rollout status deployment/${DEPLOYMENT_NAME}", returnStatus: true)
                    if (result != 0) {
                        currentBuild.result = 'FAILURE'
                        error("Spring Boot Deployment Failed")
                    }
                }
            }
        }

        stage('Cleanup Old Images') {
            steps {
                bat """
                docker image prune -f
                docker rmi -f ${IMAGE_NAME}:${BACKUP_VERSION} || echo "No old image"
                """
            }
        }
    }

    post {
        success {
            echo "üéâ Deployment successful!"
        }

        failure {
            echo "‚ö†Ô∏è Deployment failed. Rolling back..."

            powershell """
            \$env:VERSION = '${BACKUP_VERSION}'
            \$env:DOCKER_REGISTRY = '${DOCKER_REGISTRY}'
            \$env:IMAGE_NAME = '${IMAGE_NAME}'

            # Delete failed deployment
            kubectl delete deployment ${DEPLOYMENT_NAME} --ignore-not-found=true

            # Rollback using older version
            (Get-Content app/springboot-deployment.yaml) -replace '__VERSION__', \$env:VERSION | Set-Content rollback.yaml

            kubectl apply -f rollback.yaml
            kubectl patch deployment ${DEPLOYMENT_NAME} -p '{"metadata":{"name":"${DEPLOYMENT_NAME}-rollback"}}'
            """
        }
    }
}
