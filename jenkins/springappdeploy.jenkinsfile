pipeline {
    agent any

    parameters {
        string(name: 'GITHUB_REPO', defaultValue: 'SIDHARTH27163/ERP_SPRINGBOOT_APIs', description: 'GitHub Repository Name')
        choice(name: 'BRANCH', choices: ['main', 'dev', 'feature'], description: 'Select the branch to checkout')
    }

    environment {
        IMAGE_NAME = "springboot-container"
        VERSION = "1.0.${BUILD_NUMBER}"
        BACKUP_VERSION = "backup-${BUILD_NUMBER - 1}"
        MYSQL_CONTAINER = "mysql-container"
        MYSQL_VOLUME = "mysql_data"
    }

    stages {

        stage('Clean Workspace') {
            steps {
                echo "Cleaning Workspace..."
                cleanWs()
            }
        }

        stage('Clone Repo') {
            steps {
                echo "Cloning repository from GitHub: ${GITHUB_REPO} - Branch: ${BRANCH}"
                script {
                    bat """
                    git clone -b %BRANCH% https://github.com/%GITHUB_REPO%.git erp-backend
                    """
                }
            }
        }

        stage('Build with Maven') {
            steps {
                script {
                    echo "Running Maven clean install..."
                    bat """
                    cd erp-backend
                    mvn clean install -DskipTests
                    """
                }
            }
        }

        stage('Ensure MySQL Container') {
            steps {
                script {
                    echo "Ensuring MySQL container is running..."

                    // âœ… Windows batch command to check if MySQL is running
                    bat """
                    FOR /F "tokens=*" %%i IN ('docker ps --filter "name=%MYSQL_CONTAINER%" --format "{{.Names}}"') DO SET MYSQL_RUNNING=%%i

                    IF "%MYSQL_RUNNING%"=="" (
                        echo "MySQL container not running. Starting it..."
                        docker run -d ^
                        --name %MYSQL_CONTAINER% ^
                        -e MYSQL_ROOT_PASSWORD=root ^
                        -e MYSQL_DATABASE=erp ^
                        -e MYSQL_USER=root ^
                        -e MYSQL_PASSWORD=root ^
                        -p 3306:3306 ^
                        -v %MYSQL_VOLUME%:/var/lib/mysql ^
                        mysql:8
                    ) ELSE (
                        echo "MySQL container is already running."
                    )
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker Image: ${IMAGE_NAME}:${VERSION}"

                    bat """
                    cd erp-backend

                    REM  Create a backup of the current running container
                    docker tag %IMAGE_NAME%:latest %IMAGE_NAME%:%BACKUP_VERSION% || echo "No backup available"

                    REM  Build new image
                    docker build -t %IMAGE_NAME%:%VERSION% .
                    """
                }
            }
        }

        stage('Deploy New Image') {
            steps {
                script {
                    echo "Deploying new Docker image..."

                    bat """
                    cd erp-backend

                    REM Stop only the backend container, not MySQL
                    docker-compose stop backend 

                    REM Deploy the backend with MySQL running separately
                    docker-compose up -d --build backend
                    docker ps 
                    """
                }
            }
        }

        stage('Rollback on Failure') {
            steps {
                script {
                    echo "Checking for Rollback..."

                    bat """
                    REM  Rollback if deployment fails
                    IF %ERRORLEVEL% NEQ 0 (
                        echo "Deployment failed, rolling back..."
                        docker-compose stop backend
                        docker tag %IMAGE_NAME%:%BACKUP_VERSION% %IMAGE_NAME%:latest
                        docker-compose up -d --no-deps backend
                    )
                    """
                }
            }
        }

        stage('Post-Deployment Cleanup') {
            steps {
                script {
                    echo "Cleaning up old Docker images..."

                    bat '''
                    echo "Removing backup image..."
                    docker rmi -f %IMAGE_NAME%:%BACKUP_VERSION% || echo "No backup image found"

                    echo "Pruning unused images..."
                    docker image prune -f
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "Deployment completed successfully!"
            
            script {
                echo "Deleting backup image..."
                bat """
                docker rmi -f %IMAGE_NAME%:%BACKUP_VERSION% || echo "Backup image not found or already removed"
                """
            }
        }
        failure {
            echo "Deployment failed. Rolling back..."
        }
    }
}
