pipeline {
    agent any

    parameters {
        string(name: 'GITHUB_REPO', defaultValue: 'SIDHARTH27163/ERP_SPRINGBOOT_APIs', description: 'GitHub Repository Name')
        choice(name: 'BRANCH', choices: ['main', 'dev', 'feature'], description: 'Select the branch to checkout')
    }

    environment {
        IMAGE_NAME = "springboot-container"
        VERSION = "1.0.${BUILD_NUMBER}"
        BACKUP_VERSION = "backup-${BUILD_NUMBER - 1}"
    }

    stages {

        stage('Clean Workspace') {
            steps {
                echo "Cleaning Workspace..."
                cleanWs()
            }
        }

        stage('Clone Repo') {
            steps {
                echo "Cloning repository from GitHub: ${GITHUB_REPO} - Branch: ${BRANCH}"
                script {
                    // Use Windows batch command
                    bat """
                    git clone -b %BRANCH% https://github.com/%GITHUB_REPO%.git erp-backend
                    """
                }
            }
        }

        stage('Build with Maven') {
            steps {
                script {
                    echo "Running Maven clean install..."
                    bat """
                    cd erp-backend
                    mvn clean install -DskipTests
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker Image: ${IMAGE_NAME}:${VERSION}"

                    bat """
                    cd erp-backend

                    REM  Create a backup of the current running container
                    docker tag %IMAGE_NAME%:latest %IMAGE_NAME%:%BACKUP_VERSION% || echo "No backup available"

                    REM  Build new image
                    docker build -t %IMAGE_NAME%:%VERSION% .
                    """
                }
            }
        }


        stage('Deploy New Image') {
            steps {
                script {
                    echo "Deploying new Docker image..."

                    bat """
                    cd erp-backend

                    docker-compose down 

                    docker-compose up -d --build
                    docker ps 
                    """
                }
            }
        }

        stage('Rollback on Failure') {
            steps {
                script {
                    echo "Checking for Rollback..."

                    bat """
                    REM  Rollback if deployment fails
                    if %ERRORLEVEL% NEQ 0 (
                        echo " Deployment failed, rolling back..."
                        docker-compose stop backend
                        docker tag %IMAGE_NAME%:%BACKUP_VERSION% %IMAGE_NAME%:latest
                        docker-compose up -d --no-deps backend
                    )
                    """
                }
            }
        }

        stage('Post-Deployment Cleanup') {
            steps {
                script {
                    echo "Cleaning up old Docker images..."
                    bat '''
                    docker image prune -f
                    docker rmi -f %IMAGE_NAME%:%BACKUP_VERSION% || echo "No old image to remove"
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "Deployment completed successfully!"
        }
        failure {
            echo "Deployment failed. Rolling back..."
        }
    }
}
