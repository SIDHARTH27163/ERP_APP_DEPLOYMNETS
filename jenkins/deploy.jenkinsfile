pipeline {
    agent any

    environment {
        IMAGE_NAME = "springboot-container"
        VERSION = "1.0.${BUILD_NUMBER}"         // üõ†Ô∏è Versioning
        BACKUP_VERSION = "backup-${BUILD_NUMBER - 1}"
    }

    stages {
        stage('Clone Repo') {
            steps {
                echo "üì• Cloning repository..."
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "üî® Building Docker Image: ${IMAGE_NAME}:${VERSION}"
                    
                    // ‚úÖ Build Docker image
                    sh """
                    docker build -t ${IMAGE_NAME}:${VERSION} .
                    """
                }
            }
        }

        stage('Backup Existing Container') {
            steps {
                script {
                    echo "üì¶ Creating Backup of Current Container"

                    // ‚úÖ Stop existing container
                    sh """
                    docker-compose down || echo "No running container"
                    """

                    // ‚úÖ Backup current image
                    sh """
                    docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:${BACKUP_VERSION} || echo "No backup available"
                    """
                }
            }
        }

        stage('Deploy New Image') {
            steps {
                script {
                    echo "üöÄ Deploying new Docker image..."

                    // ‚úÖ Run the new container with the new image
                    sh """
                    docker-compose up -d
                    """
                }
            }
        }

        stage('Post-Deployment Cleanup') {
            steps {
                script {
                    echo "üßπ Cleaning up old Docker images..."

                    // ‚úÖ Properly escape dollar sign
                    sh '''
                    docker image prune -f
                    docker rmi -f ${IMAGE_NAME}:${BACKUP_VERSION} || true
                    '''
                }
            }
        }

        // stage('Rollback on Failure') {
        //     steps {
        //         script {
        //             echo "üîÑ Checking for Rollback..."

        //             // ‚úÖ Check container status
        //             sh """
        //             if [ \\$? -ne 0 ]; then
        //             echo " Deployment failed, rolling back..."
        //             docker tag \\${IMAGE_NAME}:\\${BACKUP_VERSION} \\${IMAGE_NAME}:latest
        //             docker-compose up -d
        //             fi
        //             """

        //         }
        //     }
        // }
    }

    post {
        success {
            echo "‚úÖ Deployment completed successfully!"
        }
        failure {
            echo "‚ùå Deployment failed. Rolling back..."
        }
    }
}
