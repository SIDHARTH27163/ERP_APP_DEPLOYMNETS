pipeline {
    agent any

    parameters {
        string(name: 'GITHUB_REPO', defaultValue: 'SIDHARTH27163/ERP_SPRINGBOOT_APIs', description: 'GitHub Repository Name')
        choice(name: 'BRANCH', choices: ['main', 'dev', 'feature'], description: 'Select the branch to checkout')  
    }

    environment {
        IMAGE_NAME = "springboot-container"
        VERSION = "1.0.${BUILD_NUMBER}"                      //  Versioning
        BACKUP_VERSION = "backup-${BUILD_NUMBER - 1}"        
    }

    stages {

        stage('Clean Workspace') {
            steps {
                echo " Cleaning Workspace..."
                cleanWs()  //  Clean before cloning
            }
        }

        stage('Clone Repo') {
            steps {
                echo " Cloning repository from GitHub: ${GITHUB_REPO} - Branch: ${BRANCH}"
                script {
                    //  Clone into subfolder named `source`
                    sh """
                    git clone -b ${BRANCH} https://github.com/${GITHUB_REPO}.git source
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo " Building Docker Image: ${IMAGE_NAME}:${VERSION}"

                    //  Navigate to correct folder before building
                    sh """
                    cd source  
                    docker build -t ${IMAGE_NAME}:${VERSION} .
                    """
                }
            }
        }

        stage('Backup Existing Container') {
            steps {
                script {
                    echo " Creating Backup of Current Container"

                    //  Backup current container
                    sh """
                    docker-compose down || echo "No running container"
                    docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:${BACKUP_VERSION} || echo "No backup available"
                    """
                }
            }
        }

        stage('Deploy New Image') {
            steps {
                script {
                    echo " Deploying new Docker image..."

                    //  Deploy from correct folder
                    sh """
                    cd source 
                    sed -i "s|image:.*|image: ${IMAGE_NAME}:${VERSION}|" docker-compose.yml
                    docker-compose up -d
                    """
                }
            }
        }

        stage('Post-Deployment Cleanup') {
            steps {
                script {
                    echo "Cleaning up old Docker images..."

                    // Cleanup old images
                    sh '''
                    docker image prune -f
                    docker rmi -f ${IMAGE_NAME}:${BACKUP_VERSION} || true
                    '''
                }
            }
        }

        stage('Rollback on Failure') {
            steps {
                script {
                    echo "ðŸ”„ Checking for Rollback..."

                    // Rollback on failure
                    sh """
                    if [ \${?} -ne 0 ]; then
                        echo " Deployment failed, rolling back..."
                        docker tag \${IMAGE_NAME}:\${BACKUP_VERSION} \${IMAGE_NAME}:latest
                        docker-compose up -d
                    fi
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Deployment completed successfully!"
        }
        failure {
            echo "Deployment failed. Rolling back..."
        }
    }
}
